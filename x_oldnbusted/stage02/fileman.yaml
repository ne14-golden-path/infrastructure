# fileman namespace
apiVersion: v1
kind: Namespace
metadata:
  name: fileman
  labels:
    name: fileman
---

# clamav
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clamav-deploy
  namespace: fileman
  labels:
    app: clamav
spec:
  replicas: 1
  selector:
    matchLabels:
      app: clamav
  template:
    metadata:
      labels:
        app: clamav
    spec: 
      containers:
      - name: clamav-pod
        image: clamav/clamav:1.2
        resources:
          limits:
            memory: 2048Mi
            cpu: '8'
          requests:
            memory: 2048Mi
            cpu: 2000m
        env:
        # use downward api to save messing around with role permissions, etc when trying
        # to scrape and apply these simple properties later on the observability stack
        - name: K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: K8S_APP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app']
        - name: K8S_POD
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
---
apiVersion: v1
kind: Service
metadata:
  name: clamav-service
  namespace: fileman
spec:
  type: ClusterIP
  selector:
    app: clamav
  ports:
    - protocol: TCP
      port: 3310
      targetPort: 3310
---

# gotenberg
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gotenberg-deploy
  namespace: fileman
  labels:
    app: gotenberg
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gotenberg
  template:
    metadata:
      labels:
        app: gotenberg
    spec: 
      containers:
      - name: gotenberg-pod
        image: gotenberg/gotenberg:7.9
        resources:
          limits:
            memory: 512Mi
            cpu: '8'
          requests:
            memory: 512Mi
            cpu: 100m
        env:
        # use downward api to save messing around with role permissions, etc when trying
        # to scrape and apply these simple properties later on the observability stack
        - name: K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: K8S_APP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app']
        - name: K8S_POD
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        
---
apiVersion: v1
kind: Service
metadata:
  name: gotenberg-service
  namespace: fileman
spec:
  type: ClusterIP
  selector:
    app: gotenberg
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
---

# docs-service
apiVersion: v1
kind: ConfigMap
metadata:
  name: docs-config
  namespace: fileman
data:
  AzureClients__LocalBlob: "UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://azurite;"
  ClamAv__Hostname: "clamav-service.fileman"
  ClamAv__Port: "3310"
  GotenbergSharpClient__HealthCheckUrl: "http://gotenberg-service.fileman:3000/health"
  GotenbergSharpClient__ServiceUrl: "http://gotenberg-service.fileman:3000"
  OpenTel__Grpc: "http:/opentelemetry-collector.monitoring:4317"
  RabbitMq__Hostname: "rabbitmq-service.mq"
  RabbitMq__Port: "5672"
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: docs-deploy
  namespace: fileman
  labels:
    app: docs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: docs
  template:
    metadata:
      labels:
        app: docs
    spec: 
      containers:
      - name: docs-pod
        image: ne1410s/services.docs:0.0.1
        resources:
          limits:
            memory: 256Mi
            cpu: '8'
          requests:
            memory: 256Mi
            cpu: 40m
        ports:
        - containerPort: 80
        envFrom:
        - configMapRef:
            name: docs-config
        env:
        # use downward api to save messing around with role permissions, etc when trying
        # to scrape and apply these simple properties later on the observability stack
        - name: K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: K8S_APP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app']
        - name: K8S_POD
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        startupProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 10
          failureThreshold: 5
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz/ready
            port: 8080
          initialDelaySeconds: 15
          failureThreshold: 3
          periodSeconds: 30
        livenessProbe:
          httpGet:
            path: /healthz/live
            port: 8080
          failureThreshold: 1
          periodSeconds: 60

---
apiVersion: v1
kind: Service
metadata:
  name: docs-service
  namespace: fileman
spec:
  type: ClusterIP
  selector:
    app: docs
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
# allows us to hit up "azurite" (single hostname in default ns) from anywhere in this ns - just to make azurite work!
apiVersion: v1
kind: Service
metadata:
  name: azurite
  namespace: fileman
spec:
  type: ExternalName
  externalName: azurite-service.default.svc.cluster.local
---
